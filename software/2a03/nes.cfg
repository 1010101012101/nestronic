MEMORY {
    # Our system has 8 KiB of RAM, organized in 256-byte pages.
    # The first page is called the zero page as the first byte of its
    # addresses are always $00. There are special instructions for dealing
    # with zero page RAM that are faster than those that operate on the
    # other pages, as the first byte of the address is implicit.
    ZP: start = $00, size = $100;

    # We'll use page one for the C stack and page two for OAM. Since we're not
    # using OAM in this lesson we won't define a memory section for it.

    # We'll use the remaining pages for general RAM.
    RAM: start = $0300, size = $1D00;

    # Our system has 8 KiB of PRG ROM, mapped to CPU addresses $E000-$FFFF.
    # Notice we're setting it's size to $1FFA, which is actually 6 bytes
    # less than 8KiB ($2000). This is to leave room for the three 2-byte
    # interrupt vector addresses at the end of the ROM.
    PRG: start = $E000, size = $1FFA, file = %O, fill = yes;

    # The CPU expects interrupt vectors at fixed addresses:
    # $FFFA-$FFFB NMI vector
    # $FFFC-$FFFD Reset vector
    # $FFFE-$FFFF IRQ vector
    VECTORS: start = $FFFA, size = $6, file = %O, fill = yes;
}

SEGMENTS {
    # PRG ROM
    STARTUP:  load = PRG,            type = ro,  define = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    VECTORS:  load = VECTORS,        type = ro;

    # CPU RAM
    ZEROPAGE:  load = ZP,             type = zp;
    BSS:       load = RAM,            type = bss, define = yes;
}

# We'll put the C stack in page one ($0100-$01FF).
SYMBOLS {
    __STACK_START__: type = weak, value = $0100;
    __STACK_SIZE__:  type = weak, value = $100;
}
